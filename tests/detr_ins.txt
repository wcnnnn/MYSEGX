(pytorch) D:\My_SegFra>D:/anaconda/envs/pytorch/python.exe d:/My_SegFra/tests/test_detr_ins.py
权重文件已存在: C:\Users\30766\.cache\torch\hub\checkpoints\resnet18-5c106cde.pth
d:\my_segfra\MYSEGX\nn\backbones\resnet.py:142: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(weights_path)
D:\anaconda\envs\pytorch\Lib\site-packages\torch\serialization.py:1485: DeprecationWarning: Python 3.14 will, by default, filter extracted tar archives and reject files or modify their metadata. Use the filter argument to control this behavior.
  tar.extract("storages", path=tmpdir)
D:\anaconda\envs\pytorch\Lib\site-packages\torch\serialization.py:1517: DeprecationWarning: Python 3.14 will, by default, filter extracted tar archives and reject files or modify their metadata. Use the filter argument to control this behavior.
  tar.extract("tensors", path=tmpdir)
[DEBUG] InstanceMaskHead初始化 - 主干网络: resnet18
[DEBUG] FPN维度: [512, 256, 128, 64]
[DEBUG] 实例分割 - 输入通道数: 257, 中间层维度: [256, 128, 64, 32, 16]
[DEBUG] 适配器通道配置:
  adapter1: 512 -> 128
  adapter2: 256 -> 64
  adapter3: 128 -> 32

[DEBUG] 输入图像形状: torch.Size([2, 3, 800, 800])

[DEBUG] Backbone特征金字塔输出:
Level 1: shape=torch.Size([2, 64, 200, 200]), range=[0.000, 5.642]
Level 2: shape=torch.Size([2, 128, 100, 100]), range=[0.000, 7.716]
Level 3: shape=torch.Size([2, 256, 50, 50]), range=[0.000, 6.867]
Level 4: shape=torch.Size([2, 512, 25, 25]), range=[0.000, 14.059]

[DEBUG] 特征投影后: shape=torch.Size([2, 256, 25, 25]), range=[-6.343, 6.505]

[DEBUG] Transformer输入序列: shape=torch.Size([625, 2, 256])
[DEBUG] 位置编码: shape=torch.Size([625, 2, 256]), range=[-6.565, 7.247]
[DEBUG] 编码器层1输出: shape=torch.Size([625, 2, 256]), range=[-4.723, 4.338]
[DEBUG] 编码器层2输出: shape=torch.Size([625, 2, 256]), range=[-4.632, 4.131]
[DEBUG] 编码器层3输出: shape=torch.Size([625, 2, 256]), range=[-4.616, 4.222]
[DEBUG] 编码器层4输出: shape=torch.Size([625, 2, 256]), range=[-4.436, 4.120]
[DEBUG] 编码器层5输出: shape=torch.Size([625, 2, 256]), range=[-4.463, 4.129]
[DEBUG] 编码器层6输出: shape=torch.Size([625, 2, 256]), range=[-4.600, 3.999]

[DEBUG] 执行instance分割分支
[DEBUG] 目标查询: shape=torch.Size([100, 2, 256])
[DEBUG] 解码器层1输出: shape=torch.Size([100, 2, 256]), range=[-3.960, 3.974]
[DEBUG] 解码器层2输出: shape=torch.Size([100, 2, 256]), range=[-4.147, 3.817]
[DEBUG] 解码器层3输出: shape=torch.Size([100, 2, 256]), range=[-4.094, 3.670]
[DEBUG] 解码器层4输出: shape=torch.Size([100, 2, 256]), range=[-3.959, 3.641]
[DEBUG] 解码器层5输出: shape=torch.Size([100, 2, 256]), range=[-4.082, 3.770]
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-4.064, 3.862]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet18
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 64, 200, 200]), 范围=[0.000, 5.642]
  特征[1]: shape=torch.Size([2, 128, 100, 100]), 范围=[0.000, 7.716]
  特征[2]: shape=torch.Size([2, 256, 50, 50]), 范围=[0.000, 6.867]
  特征[3]: shape=torch.Size([2, 512, 25, 25]), 范围=[0.000, 14.059]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 512, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.766]
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 3.535]
[DEBUG] 处理FPN特征[1]: 原始shape=torch.Size([2, 512, 25, 25])
[DEBUG] 插值后: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 13.541]
[DEBUG] 处理FPN特征[2]: 原始shape=torch.Size([2, 256, 50, 50])
[DEBUG] 插值后: shape=torch.Size([2, 256, 100, 100]), 范围=[0.000, 6.867]
[DEBUG] 处理FPN特征[3]: 原始shape=torch.Size([2, 128, 100, 100])
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 200, 200]), range=[-0.970, 0.970]
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 200, 200]), range=[-0.970, 0.970]
权重文件已存在: C:\Users\30766\.cache\torch\hub\checkpoints\resnet34-333f7ec4.pth
d:\my_segfra\MYSEGX\nn\backbones\resnet.py:154: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(weights_path)
[DEBUG] InstanceMaskHead初始化 - 主干网络: resnet34
[DEBUG] FPN维度: [512, 256, 128, 64]
[DEBUG] 实例分割 - 输入通道数: 257, 中间层维度: [256, 128, 64, 32, 16]
[DEBUG] 适配器通道配置:
  adapter1: 512 -> 128
  adapter2: 256 -> 64
  adapter3: 128 -> 32

[DEBUG] 输入图像形状: torch.Size([2, 3, 800, 800])

[DEBUG] Backbone特征金字塔输出:
Level 1: shape=torch.Size([2, 64, 200, 200]), range=[0.000, 6.350]
Level 2: shape=torch.Size([2, 128, 100, 100]), range=[0.000, 4.159]
Level 3: shape=torch.Size([2, 256, 50, 50]), range=[0.000, 6.673]
Level 4: shape=torch.Size([2, 512, 25, 25]), range=[0.000, 18.724]

[DEBUG] 特征投影后: shape=torch.Size([2, 256, 25, 25]), range=[-6.264, 5.782]

[DEBUG] Transformer输入序列: shape=torch.Size([625, 2, 256])
[DEBUG] 位置编码: shape=torch.Size([625, 2, 256]), range=[-7.146, 7.341]
[DEBUG] 编码器层1输出: shape=torch.Size([625, 2, 256]), range=[-4.445, 4.298]
[DEBUG] 编码器层2输出: shape=torch.Size([625, 2, 256]), range=[-4.474, 4.067]
[DEBUG] 编码器层3输出: shape=torch.Size([625, 2, 256]), range=[-4.522, 3.938]
[DEBUG] 编码器层4输出: shape=torch.Size([625, 2, 256]), range=[-4.441, 3.809]
[DEBUG] 编码器层5输出: shape=torch.Size([625, 2, 256]), range=[-4.411, 3.896]
[DEBUG] 编码器层6输出: shape=torch.Size([625, 2, 256]), range=[-4.038, 3.811]

[DEBUG] 执行instance分割分支
[DEBUG] 目标查询: shape=torch.Size([100, 2, 256])
[DEBUG] 解码器层1输出: shape=torch.Size([100, 2, 256]), range=[-4.748, 4.044]
[DEBUG] 解码器层2输出: shape=torch.Size([100, 2, 256]), range=[-4.648, 4.354]
[DEBUG] 解码器层3输出: shape=torch.Size([100, 2, 256]), range=[-4.561, 4.432]
[DEBUG] 解码器层4输出: shape=torch.Size([100, 2, 256]), range=[-4.641, 4.604]
[DEBUG] 解码器层5输出: shape=torch.Size([100, 2, 256]), range=[-4.619, 4.473]
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-4.756, 4.021]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet34
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 64, 200, 200]), 范围=[0.000, 6.350]
  特征[1]: shape=torch.Size([2, 128, 100, 100]), 范围=[0.000, 4.159]
  特征[2]: shape=torch.Size([2, 256, 50, 50]), 范围=[0.000, 6.673]
  特征[3]: shape=torch.Size([2, 512, 25, 25]), 范围=[0.000, 18.724]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 512, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.732]
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 3.917]
[DEBUG] 处理FPN特征[1]: 原始shape=torch.Size([2, 512, 25, 25])
[DEBUG] 插值后: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 17.299]
[DEBUG] 处理FPN特征[2]: 原始shape=torch.Size([2, 256, 50, 50])
[DEBUG] 插值后: shape=torch.Size([2, 256, 100, 100]), 范围=[0.000, 5.859]
[DEBUG] 处理FPN特征[3]: 原始shape=torch.Size([2, 128, 100, 100])
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 200, 200]), range=[-0.994, 0.855]
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 200, 200]), range=[-0.994, 0.855]
权重文件已存在: C:\Users\30766\.cache\torch\hub\checkpoints\resnet50-19c8e357.pth
d:\my_segfra\MYSEGX\nn\backbones\resnet.py:166: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  state_dict = torch.load(weights_path)
[DEBUG] InstanceMaskHead初始化 - 主干网络: resnet50
[DEBUG] FPN维度: [2048, 1024, 512, 256]
[DEBUG] 实例分割 - 输入通道数: 257, 中间层维度: [256, 128, 64, 32, 16]
[DEBUG] 适配器通道配置:
  adapter1: 2048 -> 128
  adapter2: 1024 -> 64
  adapter3: 512 -> 32

[DEBUG] 输入图像形状: torch.Size([2, 3, 800, 800])

[DEBUG] Backbone特征金字塔输出:
Level 1: shape=torch.Size([2, 256, 200, 200]), range=[0.000, 3.374]
Level 2: shape=torch.Size([2, 512, 100, 100]), range=[0.000, 5.380]
Level 3: shape=torch.Size([2, 1024, 50, 50]), range=[0.000, 11.970]
Level 4: shape=torch.Size([2, 2048, 25, 25]), range=[0.000, 21.357]

[DEBUG] 特征投影后: shape=torch.Size([2, 256, 25, 25]), range=[-3.590, 3.835]

[DEBUG] Transformer输入序列: shape=torch.Size([625, 2, 256])
[DEBUG] 位置编码: shape=torch.Size([625, 2, 256]), range=[-4.092, 5.372]
[DEBUG] 编码器层1输出: shape=torch.Size([625, 2, 256]), range=[-4.268, 3.972]
[DEBUG] 编码器层2输出: shape=torch.Size([625, 2, 256]), range=[-4.167, 3.971]
[DEBUG] 编码器层3输出: shape=torch.Size([625, 2, 256]), range=[-4.100, 3.898]
[DEBUG] 编码器层4输出: shape=torch.Size([625, 2, 256]), range=[-4.041, 4.079]
[DEBUG] 编码器层5输出: shape=torch.Size([625, 2, 256]), range=[-3.969, 4.028]
[DEBUG] 编码器层6输出: shape=torch.Size([625, 2, 256]), range=[-3.954, 4.002]

[DEBUG] 执行instance分割分支
[DEBUG] 目标查询: shape=torch.Size([100, 2, 256])
[DEBUG] 解码器层1输出: shape=torch.Size([100, 2, 256]), range=[-4.192, 3.989]
[DEBUG] 解码器层2输出: shape=torch.Size([100, 2, 256]), range=[-4.029, 4.089]
[DEBUG] 解码器层3输出: shape=torch.Size([100, 2, 256]), range=[-4.010, 4.142]
[DEBUG] 解码器层4输出: shape=torch.Size([100, 2, 256]), range=[-4.020, 4.040]
[DEBUG] 解码器层5输出: shape=torch.Size([100, 2, 256]), range=[-4.121, 4.081]
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-4.008, 3.880]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet50
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 256, 200, 200]), 范围=[0.000, 3.374]
  特征[1]: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 5.380]
  特征[2]: shape=torch.Size([2, 1024, 50, 50]), 范围=[0.000, 11.970]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 21.357]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.527]
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 4.066]
[DEBUG] 处理FPN特征[1]: 原始shape=torch.Size([2, 2048, 25, 25])
[DEBUG] 插值后: shape=torch.Size([2, 2048, 100, 100]), 范围=[0.000, 21.357]
[DEBUG] 处理FPN特征[2]: 原始shape=torch.Size([2, 1024, 50, 50])
[DEBUG] 插值后: shape=torch.Size([2, 1024, 100, 100]), 范围=[0.000, 11.970]
[DEBUG] 处理FPN特征[3]: 原始shape=torch.Size([2, 512, 100, 100])
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 200, 200]), range=[-0.909, 1.000]
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 200, 200]), range=[-0.909, 1.000]
权重文件已存在: C:\Users\30766\.cache\torch\hub\checkpoints\vgg16-397923af.pth
d:\my_segfra\MYSEGX\nn\backbones\vgg.py:64: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(weights_path))
[DEBUG] InstanceMaskHead初始化 - 主干网络: vgg16
[DEBUG] FPN维度: [512, 512, 256, 128]
[DEBUG] 实例分割 - 输入通道数: 257, 中间层维度: [256, 128, 64, 32, 16]
[DEBUG] 适配器通道配置:
  adapter1: 512 -> 128
  adapter2: 512 -> 64
  adapter3: 256 -> 32

[DEBUG] 输入图像形状: torch.Size([2, 3, 800, 800])

[DEBUG] Backbone特征金字塔输出:
Level 1: shape=torch.Size([2, 64, 400, 400]), range=[0.000, 35.304]
Level 2: shape=torch.Size([2, 128, 200, 200]), range=[0.000, 91.385]
Level 3: shape=torch.Size([2, 256, 100, 100]), range=[0.000, 122.256]
Level 4: shape=torch.Size([2, 512, 50, 50]), range=[0.000, 29.578]
Level 5: shape=torch.Size([2, 512, 25, 25]), range=[0.000, 7.091]

[DEBUG] 特征投影后: shape=torch.Size([2, 256, 25, 25]), range=[-1.227, 1.192]

[DEBUG] Transformer输入序列: shape=torch.Size([625, 2, 256])
[DEBUG] 位置编码: shape=torch.Size([625, 2, 256]), range=[-1.986, 2.408]
[DEBUG] 编码器层1输出: shape=torch.Size([625, 2, 256]), range=[-4.168, 3.048]
[DEBUG] 编码器层2输出: shape=torch.Size([625, 2, 256]), range=[-4.073, 3.085]
[DEBUG] 编码器层3输出: shape=torch.Size([625, 2, 256]), range=[-4.009, 3.181]
[DEBUG] 编码器层4输出: shape=torch.Size([625, 2, 256]), range=[-4.104, 3.264]
[DEBUG] 编码器层5输出: shape=torch.Size([625, 2, 256]), range=[-4.094, 3.364]
[DEBUG] 编码器层6输出: shape=torch.Size([625, 2, 256]), range=[-4.200, 3.322]

[DEBUG] 执行instance分割分支
[DEBUG] 目标查询: shape=torch.Size([100, 2, 256])
[DEBUG] 解码器层1输出: shape=torch.Size([100, 2, 256]), range=[-4.214, 3.689]
[DEBUG] 解码器层2输出: shape=torch.Size([100, 2, 256]), range=[-4.082, 3.786]
[DEBUG] 解码器层3输出: shape=torch.Size([100, 2, 256]), range=[-4.004, 3.870]
[DEBUG] 解码器层4输出: shape=torch.Size([100, 2, 256]), range=[-4.080, 3.873]
[DEBUG] 解码器层5输出: shape=torch.Size([100, 2, 256]), range=[-4.160, 3.949]
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-3.786, 3.960]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: vgg16
[DEBUG] 特征列表长度: 5
  特征[0]: shape=torch.Size([2, 64, 400, 400]), 范围=[0.000, 35.304]
  特征[1]: shape=torch.Size([2, 128, 200, 200]), 范围=[0.000, 91.385]
  特征[2]: shape=torch.Size([2, 256, 100, 100]), 范围=[0.000, 122.256]
  特征[3]: shape=torch.Size([2, 512, 50, 50]), 范围=[0.000, 29.578]
  特征[4]: shape=torch.Size([2, 512, 25, 25]), 范围=[0.000, 7.091]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 512, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.634]
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 3.964]
[DEBUG] 处理FPN特征[1]: 原始shape=torch.Size([2, 512, 25, 25])
[DEBUG] 插值后: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 7.091]
[DEBUG] 处理FPN特征[2]: 原始shape=torch.Size([2, 512, 50, 50])
[DEBUG] 插值后: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 29.578]
[DEBUG] 处理FPN特征[3]: 原始shape=torch.Size([2, 256, 100, 100])
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 400, 400]), range=[-0.990, 1.000]
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 400, 400]), range=[-0.990, 1.000]
权重文件已存在: C:\Users\30766\.cache\torch\hub\checkpoints\vgg19-dcbb9e9d.pth
d:\my_segfra\MYSEGX\nn\backbones\vgg.py:71: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  model.load_state_dict(torch.load(weights_path))
[DEBUG] InstanceMaskHead初始化 - 主干网络: vgg19
[DEBUG] FPN维度: [512, 512, 256, 128]
[DEBUG] 实例分割 - 输入通道数: 257, 中间层维度: [256, 128, 64, 32, 16]
[DEBUG] 适配器通道配置:
  adapter1: 512 -> 128
  adapter2: 512 -> 64
  adapter3: 256 -> 32

[DEBUG] 输入图像形状: torch.Size([2, 3, 800, 800])

[DEBUG] Backbone特征金字塔输出:
Level 1: shape=torch.Size([2, 64, 400, 400]), range=[0.000, 36.105]
Level 2: shape=torch.Size([2, 128, 200, 200]), range=[0.000, 81.880]
Level 3: shape=torch.Size([2, 256, 100, 100]), range=[0.000, 114.567]
Level 4: shape=torch.Size([2, 512, 50, 50]), range=[0.000, 25.820]
Level 5: shape=torch.Size([2, 512, 25, 25]), range=[0.000, 4.764]

[DEBUG] 特征投影后: shape=torch.Size([2, 256, 25, 25]), range=[-1.001, 1.067]

[DEBUG] Transformer输入序列: shape=torch.Size([625, 2, 256])
[DEBUG] 位置编码: shape=torch.Size([625, 2, 256]), range=[-1.929, 2.242]
[DEBUG] 编码器层1输出: shape=torch.Size([625, 2, 256]), range=[-3.299, 3.260]
[DEBUG] 编码器层2输出: shape=torch.Size([625, 2, 256]), range=[-3.454, 3.191]
[DEBUG] 编码器层3输出: shape=torch.Size([625, 2, 256]), range=[-3.643, 3.184]
[DEBUG] 编码器层4输出: shape=torch.Size([625, 2, 256]), range=[-3.849, 3.253]
[DEBUG] 编码器层5输出: shape=torch.Size([625, 2, 256]), range=[-3.901, 3.316]
[DEBUG] 编码器层6输出: shape=torch.Size([625, 2, 256]), range=[-3.980, 3.400]

[DEBUG] 执行instance分割分支
[DEBUG] 目标查询: shape=torch.Size([100, 2, 256])
[DEBUG] 解码器层1输出: shape=torch.Size([100, 2, 256]), range=[-3.774, 3.985]
[DEBUG] 解码器层2输出: shape=torch.Size([100, 2, 256]), range=[-3.729, 4.267]
[DEBUG] 解码器层3输出: shape=torch.Size([100, 2, 256]), range=[-3.685, 4.248]
[DEBUG] 解码器层4输出: shape=torch.Size([100, 2, 256]), range=[-3.680, 4.121]
[DEBUG] 解码器层5输出: shape=torch.Size([100, 2, 256]), range=[-3.641, 4.187]
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-3.671, 4.263]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: vgg19
[DEBUG] 特征列表长度: 5
  特征[0]: shape=torch.Size([2, 64, 400, 400]), 范围=[0.000, 36.105]
  特征[1]: shape=torch.Size([2, 128, 200, 200]), 范围=[0.000, 81.880]
  特征[2]: shape=torch.Size([2, 256, 100, 100]), 范围=[0.000, 114.567]
  特征[3]: shape=torch.Size([2, 512, 50, 50]), 范围=[0.000, 25.820]
  特征[4]: shape=torch.Size([2, 512, 25, 25]), 范围=[0.000, 4.764]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 512, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.628]
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 3.988]
[DEBUG] 处理FPN特征[1]: 原始shape=torch.Size([2, 512, 25, 25])
[DEBUG] 插值后: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 4.764]
[DEBUG] 处理FPN特征[2]: 原始shape=torch.Size([2, 512, 50, 50])
[DEBUG] 插值后: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 25.820]
[DEBUG] 处理FPN特征[3]: 原始shape=torch.Size([2, 256, 100, 100])
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 400, 400]), range=[-1.000, 1.000]
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 400, 400]), range=[-1.000, 1.000]
.权重文件已存在: C:\Users\30766\.cache\torch\hub\checkpoints\resnet50-19c8e357.pth
[DEBUG] InstanceMaskHead初始化 - 主干网络: resnet50
[DEBUG] FPN维度: [2048, 1024, 512, 256]
[DEBUG] 实例分割 - 输入通道数: 257, 中间层维度: [256, 128, 64, 32, 16]
[DEBUG] 适配器通道配置:
  adapter1: 2048 -> 128
  adapter2: 1024 -> 64
  adapter3: 512 -> 32

[DEBUG] 输入图像形状: torch.Size([2, 3, 800, 800])

[DEBUG] Backbone特征金字塔输出:
Level 1: shape=torch.Size([2, 256, 200, 200]), range=[0.000, 3.339]
Level 2: shape=torch.Size([2, 512, 100, 100]), range=[0.000, 5.061]
Level 3: shape=torch.Size([2, 1024, 50, 50]), range=[0.000, 8.811]
Level 4: shape=torch.Size([2, 2048, 25, 25]), range=[0.000, 18.394]

[DEBUG] 特征投影后: shape=torch.Size([2, 256, 25, 25]), range=[-4.029, 3.846]

[DEBUG] Transformer输入序列: shape=torch.Size([625, 2, 256])
[DEBUG] 位置编码: shape=torch.Size([625, 2, 256]), range=[-4.215, 5.180]
[DEBUG] 编码器层1输出: shape=torch.Size([625, 2, 256]), range=[-4.637, 4.214]
[DEBUG] 编码器层2输出: shape=torch.Size([625, 2, 256]), range=[-4.965, 4.363]
[DEBUG] 编码器层3输出: shape=torch.Size([625, 2, 256]), range=[-4.953, 4.452]
[DEBUG] 编码器层4输出: shape=torch.Size([625, 2, 256]), range=[-4.840, 4.503]
[DEBUG] 编码器层5输出: shape=torch.Size([625, 2, 256]), range=[-4.849, 4.104]
[DEBUG] 编码器层6输出: shape=torch.Size([625, 2, 256]), range=[-4.660, 3.989]

[DEBUG] 执行instance分割分支
[DEBUG] 目标查询: shape=torch.Size([100, 2, 256])
[DEBUG] 解码器层1输出: shape=torch.Size([100, 2, 256]), range=[-4.492, 4.197]
[DEBUG] 解码器层2输出: shape=torch.Size([100, 2, 256]), range=[-4.376, 4.362]
[DEBUG] 解码器层3输出: shape=torch.Size([100, 2, 256]), range=[-4.343, 4.182]
[DEBUG] 解码器层4输出: shape=torch.Size([100, 2, 256]), range=[-4.264, 4.210]
[DEBUG] 解码器层5输出: shape=torch.Size([100, 2, 256]), range=[-4.237, 4.225]
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-4.240, 4.174]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet50
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 256, 200, 200]), 范围=[0.000, 3.339]
  特征[1]: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 5.061]
  特征[2]: shape=torch.Size([2, 1024, 50, 50]), 范围=[0.000, 8.811]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 18.394]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 解码器层4输出: shape=torch.Size([100, 2, 256]), range=[-4.264, 4.210]
[DEBUG] 解码器层5输出: shape=torch.Size([100, 2, 256]), range=[-4.237, 4.225]
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-4.240, 4.174]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet50
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 256, 200, 200]), 范围=[0.000, 3.339]
  特征[1]: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 5.061]
  特征[2]: shape=torch.Size([2, 1024, 50, 50]), 范围=[0.000, 8.811]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 18.394]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 解码器层5输出: shape=torch.Size([100, 2, 256]), range=[-4.237, 4.225]
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-4.240, 4.174]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet50
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 256, 200, 200]), 范围=[0.000, 3.339]
  特征[1]: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 5.061]
  特征[2]: shape=torch.Size([2, 1024, 50, 50]), 范围=[0.000, 8.811]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 18.394]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 解码器层6输出: shape=torch.Size([100, 2, 256]), range=[-4.240, 4.174]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet50
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 256, 200, 200]), 范围=[0.000, 3.339]
  特征[1]: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 5.061]
  特征[2]: shape=torch.Size([2, 1024, 50, 50]), 范围=[0.000, 8.811]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 18.394]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.803]

[DEBUG] 类别预测输出: shape=torch.Size([2, 100, 21])

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet50
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 256, 200, 200]), 范围=[0.000, 3.339]
  特征[1]: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 5.061]
  特征[2]: shape=torch.Size([2, 1024, 50, 50]), 范围=[0.000, 8.811]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 18.394]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.803]

[DEBUG] InstanceMaskHead.forward - 主干网络: resnet50
[DEBUG] 特征列表长度: 4
  特征[0]: shape=torch.Size([2, 256, 200, 200]), 范围=[0.000, 3.339]
  特征[1]: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 5.061]
  特征[2]: shape=torch.Size([2, 1024, 50, 50]), 范围=[0.000, 8.811]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 18.394]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.803]
  特征[0]: shape=torch.Size([2, 256, 200, 200]), 范围=[0.000, 3.339]
  特征[1]: shape=torch.Size([2, 512, 100, 100]), 范围=[0.000, 5.061]
  特征[2]: shape=torch.Size([2, 1024, 50, 50]), 范围=[0.000, 8.811]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 18.394]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.803]
  特征[3]: shape=torch.Size([2, 2048, 25, 25]), 范围=[0.000, 18.394]
[DEBUG] 掩码嵌入: shape=torch.Size([2, 100, 256])
[DEBUG] 目标尺寸: (100, 100), 基于最后一层特征 torch.Size([2, 2048, 25, 25])
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.803]
[DEBUG] 处理后的掩码嵌入: shape=torch.Size([200, 256, 100, 100])
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.803]
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 3.641]
[DEBUG] 拼接后的特征: shape=torch.Size([200, 257, 100, 100])
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.803]
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 3.641]
[DEBUG] 第1层后: shape=torch.Size([200, 256, 100, 100]), 范围=[0.000, 3.803]
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 3.641]
[DEBUG] 处理FPN特征[1]: 原始shape=torch.Size([2, 2048, 25, 25])
[DEBUG] 第2层后: shape=torch.Size([200, 128, 100, 100]), 范围=[0.000, 3.641]
[DEBUG] 处理FPN特征[1]: 原始shape=torch.Size([2, 2048, 25, 25])
[DEBUG] 处理FPN特征[1]: 原始shape=torch.Size([2, 2048, 25, 25])
[DEBUG] 插值后: shape=torch.Size([2, 2048, 100, 100]), 范围=[0.000, 18.394]
[DEBUG] 插值后: shape=torch.Size([2, 2048, 100, 100]), 范围=[0.000, 18.394]
[DEBUG] 处理FPN特征[2]: 原始shape=torch.Size([2, 1024, 50, 50])
[DEBUG] 插值后: shape=torch.Size([2, 1024, 100, 100]), 范围=[0.000, 8.811]
[DEBUG] 处理FPN特征[3]: 原始shape=torch.Size([2, 512, 100, 100])
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 200, 200]), range=[-0.963, 0.961]        
[DEBUG] 掩码预测输出: shape=torch.Size([2, 100, 200, 200]), range=[-0.963, 0.961]        
.
----------------------------------------------------------------------
Ran 2 tests in 85.368s

OK